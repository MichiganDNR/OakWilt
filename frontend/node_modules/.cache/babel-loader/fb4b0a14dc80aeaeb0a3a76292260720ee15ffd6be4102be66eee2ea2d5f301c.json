{"ast":null,"code":"import L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport axios from \"axios\";\nexport default {\n  name: \"AppLayout\",\n  data() {\n    return {\n      images: [],\n      heading: \"Upload Images Here\",\n      selectedFiles: [],\n      classificationResults: [],\n      isLoading: false,\n      selectedFilter: \"\",\n      notificationMessage: \"\",\n      downloadLinkCsv: \"\",\n      downloadLinkGeoJson: \"\",\n      map: null,\n      showConfirmationPopup: false,\n      // Track popup visibility\n      feedbackData: null // Store feedback to submit after confirmation\n    };\n  },\n  watch: {\n    selectedFilter() {\n      this.updateMapWithResults(this.filteredResults);\n    }\n  },\n  mounted() {\n    this.initMap();\n  },\n  computed: {\n    filteredResults() {\n      if (!this.selectedFilter) {\n        return this.classificationResults;\n      }\n      return this.classificationResults.filter(result => result.classification === this.selectedFilter);\n    },\n    imagesSelected() {\n      return this.images.length > 0;\n    },\n    imageNames() {\n      return this.imagesSelected ? Array.from(this.images).map(image => image.name).join(\"; \") : \"\";\n    }\n  },\n  methods: {\n    handleUploadImages() {\n      this.images = this.$refs.images.files;\n    },\n    async submitImages() {\n      this.isLoading = true;\n      let formData = new FormData();\n      for (let i = 0; i < this.images.length; i++) {\n        formData.append(\"file\", this.images[i]);\n      }\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_API_URL}/upload-images`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        this.classificationResults = Object.values(response.data.results).flat();\n        this.isLoading = false;\n        this.notificationMessage = response.data.message;\n        this.downloadLinkCsv = `${process.env.VUE_APP_API_URL}/results.csv`;\n        this.downloadLinkGeoJson = `${process.env.VUE_APP_API_URL}/results.geojson`;\n        this.updateMapWithResults(this.classificationResults);\n      } catch (error) {\n        console.error(\"Error uploading files:\", error);\n        this.notificationMessage = \"Error generating results files\";\n        this.isLoading = false;\n      }\n    },\n    getCategoryColor(category) {\n      switch (category) {\n        case \"THIS PICTURE HAS OAK WILT\":\n          return \"red\";\n        case \"THERE'S A HIGH CHANCE OF OAK WILTS\":\n          return \"orange\";\n        case \"CHANGES OF COLORS ON TREE LEAVES\":\n          return \"#ffdb58\";\n        // Mustard Yellow\n        case \"Not an Oak Wilt\":\n          return \"green\";\n        default:\n          return \"#333\";\n      }\n    },\n    updateMapWithResults(results) {\n      this.map.eachLayer(layer => {\n        if (layer instanceof L.Marker) {\n          layer.remove();\n        }\n      });\n      const markerColors = {\n        \"THIS PICTURE HAS OAK WILT\": \"red\",\n        \"THERE'S A HIGH CHANCE OF OAK WILTS\": \"orange\",\n        \"CHANGES OF COLORS ON TREE LEAVES\": \"green\"\n      };\n      const filtered = !this.selectedFilter ? results : results.filter(result => result.classification === this.selectedFilter);\n      filtered.forEach(result => {\n        if (result.classification !== \"Not an Oak Wilt\" && result.latitude && result.longitude) {\n          const markerColor = markerColors[result.classification] || \"green\";\n          const popupContent = `\n            <div>\n              <img src=\"${process.env.VUE_APP_API_URL}/images/${result.filename}\" style=\"width:100px;\"><br>\n              <strong>File:</strong> <a href=\"${process.env.VUE_APP_API_URL}/images/${result.filename}\" target=\"_blank\">${result.filename}</a><br>\n              <strong>Prediction:</strong> ${result.prediction}<br>\n              <strong>Category:</strong> ${result.classification}<br>\n              <strong>Latitude:</strong> ${result.latitude}<br>\n              <strong>Longitude:</strong> ${result.longitude}<br>\n        </div>\n          `;\n          const markerIcon = L.icon({\n            iconUrl: require(`@/assets/${markerColor}.png`),\n            iconSize: [25, 38],\n            iconAnchor: [12, 41],\n            popupAnchor: [1, -34]\n          });\n          L.marker([result.latitude, result.longitude], {\n            icon: markerIcon\n          }).addTo(this.map).bindPopup(popupContent);\n        }\n      });\n      if (filtered.length > 0) {\n        const group = new L.featureGroup(filtered.map(result => new L.LatLng(result.latitude, result.longitude)));\n        this.map.fitBounds(group.getBounds());\n      }\n    },\n    initMap() {\n      this.map = L.map(\"mapid\").setView([43.0514, -85.23699], 8.5); // Save map instance to this.map\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: \"Oak Wilts will be shown here\"\n      }).addTo(this.map);\n    },\n    confirmFeedback(filename, isCorrect) {\n      this.feedbackData = {\n        filename,\n        isCorrect\n      };\n      this.showConfirmationPopup = true; // Show the confirmation popup\n    },\n    submitFeedback(isConfirmed) {\n      if (isConfirmed) {\n        axios.post(`${process.env.VUE_APP_API_URL}/submit-feedback`, this.feedbackData).then(response => {\n          console.log(\"Feedback submitted:\", response.data);\n        }).catch(error => {\n          console.error(\"Error submitting feedback:\", error);\n        });\n      }\n      this.showConfirmationPopup = false; // Close the popup\n    },\n    redirectToGeoJsonIo() {\n      window.open(\"https://geojson.io/\", \"_blank\");\n    }\n  }\n};","map":{"version":3,"names":["L","axios","name","data","images","heading","selectedFiles","classificationResults","isLoading","selectedFilter","notificationMessage","downloadLinkCsv","downloadLinkGeoJson","map","showConfirmationPopup","feedbackData","watch","updateMapWithResults","filteredResults","mounted","initMap","computed","filter","result","classification","imagesSelected","length","imageNames","Array","from","image","join","methods","handleUploadImages","$refs","files","submitImages","formData","FormData","i","append","response","post","process","env","VUE_APP_API_URL","headers","Object","values","results","flat","message","error","console","getCategoryColor","category","eachLayer","layer","Marker","remove","markerColors","filtered","forEach","latitude","longitude","markerColor","popupContent","filename","prediction","markerIcon","icon","iconUrl","require","iconSize","iconAnchor","popupAnchor","marker","addTo","bindPopup","group","featureGroup","LatLng","fitBounds","getBounds","setView","tileLayer","attribution","confirmFeedback","isCorrect","submitFeedback","isConfirmed","then","log","catch","redirectToGeoJsonIo","window","open"],"sources":["src/components/AppLayOut.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <header class=\"app-header\">\n      <h1><strong>Oak Wilt Detection</strong></h1>\n    </header>\n\n    <div class=\"row\">\n      <div class=\"column\">\n        <section class=\"image-upload\">\n          <h1 class=\"row\">{{ heading }}</h1>\n          <div class=\"custom-file-upload\">\n            <!-- New Button to Redirect to GeoJSON.io -->\n            <button class=\"geojson-button button\" @click=\"redirectToGeoJsonIo\">\n              Plot Old Data with GeoJSON\n            </button>\n\n            <div class=\"file-upload-wrapper\">\n              <input\n                type=\"file\"\n                id=\"images\"\n                class=\"select-images-button\"\n                ref=\"images\"\n                multiple\n                accept=\".jpg,.jpeg,.png,.gif\"\n                @change=\"handleUploadImages\"\n              />\n              <input\n                type=\"text\"\n                class=\"file-upload-input\"\n                :title=\"imageNames\"\n                v-model=\"imageNames\"\n                readonly\n              />\n            </div>\n            <button class=\"file-upload-button button\" @click=\"submitImages\">\n              SUBMIT IMAGES\n            </button>\n          </div>\n          <div v-if=\"notificationMessage\">\n            <a :href=\"downloadLinkCsv\" class=\"file-download-button\" download>\n              Download CSV Results\n            </a>\n            <br />\n            <a\n              :href=\"downloadLinkGeoJson\"\n              class=\"file-download-button\"\n              download\n            >\n              Download GeoJSON Results\n            </a>\n          </div>\n        </section>\n        <div class=\"row\">\n          <div class=\"full-width-column\">\n            <p>Classification Results</p>\n            <select v-model=\"selectedFilter\" class=\"filter-dropdown\">\n              <option value=\"\">All</option>\n              <option value=\"THIS PICTURE HAS OAK WILT\">\n                THIS PICTURE HAS OAK WILT\n              </option>\n              <option value=\"THERE'S A HIGH CHANCE OF OAK WILTS\">\n                THERE'S A HIGH CHANCE OF OAK WILTS\n              </option>\n              <option value=\"CHANGES OF COLORS ON TREE LEAVES\">\n                CHANGES OF COLORS ON TREE LEAVES\n              </option>\n              <option value=\"Not an Oak Wilt\">Not an Oak Wilt</option>\n            </select>\n            <div v-if=\"isLoading\" class=\"loading-overlay\">\n              <div class=\"loading-message\">\n                Generating Results, please wait...\n              </div>\n            </div>\n          </div>\n        </div>\n        <section class=\"classification-results\">\n          <div class=\"grid-container\">\n            <div\n              v-for=\"result in filteredResults\"\n              :key=\"result.filename\"\n              class=\"grid-item\"\n            >\n              <img\n                :src=\"`${process.env.VUE_APP_API_URL}/images/${result.filename}`\"\n                alt=\"Image preview\"\n                class=\"image-preview\"\n              />\n              <div>\n                <p>\n                  <strong>File:</strong>\n                  <a\n                    :href=\"`${process.env.VUE_APP_API_URL}/images/${result.filename}`\"\n                    target=\"_blank\"\n                    >{{ result.filename }}</a\n                  >\n                </p>\n                <p><strong>Prediction:</strong> {{ result.prediction }}</p>\n                <p :style=\"{ color: getCategoryColor(result.classification) }\">\n                  <strong>Category:</strong> {{ result.classification }}\n                </p>\n                <p><strong>Latitude:</strong> {{ result.latitude }}</p>\n                <p><strong>Longitude:</strong> {{ result.longitude }}</p>\n                <div>\n                  <button\n                    @click=\"confirmFeedback(result.filename, false)\"\n                    class=\"feedback-button\"\n                  >\n                    Oak Wilt\n                  </button>\n                  <button\n                    @click=\"confirmFeedback(result.filename, true)\"\n                    class=\"feedback-button\"\n                  >\n                    Dead Trees\n                  </button>\n                  <button\n                    @click=\"confirmFeedback(result.filename, true)\"\n                    class=\"feedback-button\"\n                  >\n                    Healthy\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n      <div class=\"column\">\n        <p>Location</p>\n        <div id=\"mapid\" class=\"map-full-width\"></div>\n      </div>\n    </div>\n\n    <!-- Confirmation Popup -->\n    <div v-if=\"showConfirmationPopup\" class=\"popup-overlay\">\n      <div class=\"popup\">\n        <p>Do you really want to share feedback?</p>\n        <button @click=\"submitFeedback(true)\" class=\"popup-button\">Yes</button>\n        <button @click=\"submitFeedback(false)\" class=\"popup-button\">No</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"AppLayout\",\n  data() {\n    return {\n      images: [],\n      heading: \"Upload Images Here\",\n      selectedFiles: [],\n      classificationResults: [],\n      isLoading: false,\n      selectedFilter: \"\",\n      notificationMessage: \"\",\n      downloadLinkCsv: \"\",\n      downloadLinkGeoJson: \"\",\n      map: null,\n      showConfirmationPopup: false, // Track popup visibility\n      feedbackData: null, // Store feedback to submit after confirmation\n    };\n  },\n  watch: {\n    selectedFilter() {\n      this.updateMapWithResults(this.filteredResults);\n    },\n  },\n  mounted() {\n    this.initMap();\n  },\n  computed: {\n    filteredResults() {\n      if (!this.selectedFilter) {\n        return this.classificationResults;\n      }\n      return this.classificationResults.filter(\n        (result) => result.classification === this.selectedFilter\n      );\n    },\n    imagesSelected() {\n      return this.images.length > 0;\n    },\n    imageNames() {\n      return this.imagesSelected\n        ? Array.from(this.images)\n            .map((image) => image.name)\n            .join(\"; \")\n        : \"\";\n    },\n  },\n  methods: {\n    handleUploadImages() {\n      this.images = this.$refs.images.files;\n    },\n    async submitImages() {\n      this.isLoading = true;\n      let formData = new FormData();\n\n      for (let i = 0; i < this.images.length; i++) {\n        formData.append(\"file\", this.images[i]);\n      }\n\n      try {\n        const response = await axios.post(\n          `${process.env.VUE_APP_API_URL}/upload-images`,\n          formData,\n          {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\",\n            },\n          }\n        );\n        this.classificationResults = Object.values(\n          response.data.results\n        ).flat();\n        this.isLoading = false;\n        this.notificationMessage = response.data.message;\n        this.downloadLinkCsv = `${process.env.VUE_APP_API_URL}/results.csv`;\n        this.downloadLinkGeoJson = `${process.env.VUE_APP_API_URL}/results.geojson`;\n        this.updateMapWithResults(this.classificationResults);\n      } catch (error) {\n        console.error(\"Error uploading files:\", error);\n        this.notificationMessage = \"Error generating results files\";\n        this.isLoading = false;\n      }\n    },\n    getCategoryColor(category) {\n      switch (category) {\n        case \"THIS PICTURE HAS OAK WILT\":\n          return \"red\";\n        case \"THERE'S A HIGH CHANCE OF OAK WILTS\":\n          return \"orange\";\n        case \"CHANGES OF COLORS ON TREE LEAVES\":\n          return \"#ffdb58\"; // Mustard Yellow\n        case \"Not an Oak Wilt\":\n          return \"green\";\n        default:\n          return \"#333\";\n      }\n    },\n    updateMapWithResults(results) {\n      this.map.eachLayer((layer) => {\n        if (layer instanceof L.Marker) {\n          layer.remove();\n        }\n      });\n\n      const markerColors = {\n        \"THIS PICTURE HAS OAK WILT\": \"red\",\n        \"THERE'S A HIGH CHANCE OF OAK WILTS\": \"orange\",\n        \"CHANGES OF COLORS ON TREE LEAVES\": \"green\",\n      };\n      const filtered = !this.selectedFilter\n        ? results\n        : results.filter(\n            (result) => result.classification === this.selectedFilter\n          );\n\n      filtered.forEach((result) => {\n        if (\n          result.classification !== \"Not an Oak Wilt\" &&\n          result.latitude &&\n          result.longitude\n        ) {\n          const markerColor = markerColors[result.classification] || \"green\";\n          const popupContent = `\n            <div>\n              <img src=\"${process.env.VUE_APP_API_URL}/images/${result.filename}\" style=\"width:100px;\"><br>\n              <strong>File:</strong> <a href=\"${process.env.VUE_APP_API_URL}/images/${result.filename}\" target=\"_blank\">${result.filename}</a><br>\n              <strong>Prediction:</strong> ${result.prediction}<br>\n              <strong>Category:</strong> ${result.classification}<br>\n              <strong>Latitude:</strong> ${result.latitude}<br>\n              <strong>Longitude:</strong> ${result.longitude}<br>\n        </div>\n          `;\n\n          const markerIcon = L.icon({\n            iconUrl: require(`@/assets/${markerColor}.png`),\n            iconSize: [25, 38],\n            iconAnchor: [12, 41],\n            popupAnchor: [1, -34],\n          });\n\n          L.marker([result.latitude, result.longitude], { icon: markerIcon })\n            .addTo(this.map)\n            .bindPopup(popupContent);\n        }\n      });\n\n      if (filtered.length > 0) {\n        const group = new L.featureGroup(\n          filtered.map(\n            (result) => new L.LatLng(result.latitude, result.longitude)\n          )\n        );\n        this.map.fitBounds(group.getBounds());\n      }\n    },\n    initMap() {\n      this.map = L.map(\"mapid\").setView([43.0514, -85.23699], 8.5); // Save map instance to this.map\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: \"Oak Wilts will be shown here\",\n      }).addTo(this.map);\n    },\n    confirmFeedback(filename, isCorrect) {\n      this.feedbackData = { filename, isCorrect };\n      this.showConfirmationPopup = true; // Show the confirmation popup\n    },\n    submitFeedback(isConfirmed) {\n      if (isConfirmed) {\n        axios\n          .post(`${process.env.VUE_APP_API_URL}/submit-feedback`,\n           this.feedbackData\n          )\n          .then((response) => {\n            console.log(\"Feedback submitted:\", response.data);\n          })\n          .catch((error) => {\n            console.error(\"Error submitting feedback:\", error);\n          });\n      }\n      this.showConfirmationPopup = false; // Close the popup\n    },\n    redirectToGeoJsonIo() {\n      window.open(\"https://geojson.io/\", \"_blank\");\n    },\n  },\n};\n</script>\n\n<style scoped>\nhtml,\nbody,\n#app {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.app-container {\n  min-height: 100vh;\n  text-align: center;\n  color: rgb(7, 0, 0);\n  background-color: rgb(248, 247, 188);\n}\n\n.app-header h1 {\n  font-size: 48px;\n  font-weight: bold;\n}\n\n.row {\n  display: flex;\n  font-size: 32px;\n  font-weight: bold;\n  margin: 20px 0;\n  text-align: left;\n}\n\n.buttoncol {\n  flex: 1;\n  padding: 10px;\n  box-sizing: border-box;\n  font-size: 32px;\n  border: 4px dashed #575656;\n  text-align: center;\n}\n\n.column {\n  flex: auto;\n  padding: 10px;\n  box-sizing: border-box;\n}\n\n#mapid {\n  height: calc(100vh - 120px);\n  width: 100%;\n}\n\n.full-width-column {\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n  font-weight: bold;\n  font-size: 36px;\n}\n\n.classification-row {\n  text-align: left;\n  margin: 10px 0;\n  font-size: 24px;\n  font-weight: bold;\n}\n\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n  gap: 10px;\n}\n\n.grid-item img {\n  width: 100%;\n  height: auto;\n}\n\n.grid-view {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n  gap: 10px;\n}\n\n.image-preview {\n  width: 100%;\n  max-width: 130px;\n  height: auto;\n  margin-bottom: 5px;\n}\n\n.classification-results {\n  font-size: 14px;\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(255, 255, 255, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));\n  gap: 5px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n.grid-item {\n  border: 1px solid #ccc;\n  padding: 5px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n.image-preview {\n  width: 100%;\n  max-width: 130px;\n  height: auto;\n  margin-bottom: 5px;\n}\n\n.loading-message {\n  font-size: 2em;\n  color: #333;\n}\n\n.filter-dropdown {\n  margin: 10px 0;\n  padding: 5px 10px;\n  font-size: 16px;\n}\n\n.file-upload-button {\n  padding: 10px 60px;\n  font-size: 16px;\n  cursor: pointer;\n  font-weight: bold;\n  background-color: #6fc5e7;\n  color: rgb(8, 0, 0);\n  border: none;\n  border-radius: 4px;\n  margin-top: 40px;\n}\n\n.geojson-button {\n  padding: 10px 60px;\n  font-size: 16px;\n  cursor: pointer;\n  font-weight: bold;\n  background-color: #6fc5e7;\n  color: rgb(8, 0, 0);\n  border: none;\n  border-radius: 4px;\n  margin-top: 40px;\n}\n\n.geojson-button:hover {\n  background-color: #4cae4c;\n}\n\n.file-upload-button:hover {\n  background-color: #4cae4c;\n}\n\n.mustard-yellow {\n  color: #ffdb58;\n}\n\n.select-images-button {\n  padding: 6px 12px;\n  font-size: 14px;\n  font-weight: bold;\n  background-color: #4cae4c;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-right: 10px;\n}\n\n.select-images-button:hover {\n  background-color: #45a049;\n}\n\n.file-download-button {\n  display: inline-block;\n  padding: 10px 60px;\n  font-size: 16px;\n  cursor: pointer;\n  font-weight: bold;\n  background-color: #4cae4c;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  margin-top: 10px;\n  text-decoration: none;\n  text-align: center;\n}\n\n.file-download-button:hover {\n  background-color: #45a049;\n}\n\n.feedback-button {\n  margin-top: 10px;\n  margin-right: 5px;\n  padding: 5px 15px;\n  font-size: 14px;\n  cursor: pointer;\n  font-weight: bold;\n  background-color: #f55c5cce;\n  color: white;\n  border: none;\n  border-radius: 4px;\n}\n\n.feedback-button:hover {\n  background-color: #f75656;\n}\n\n.popup-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.popup {\n  background-color: white;\n  padding: 20px;\n  border-radius: 8px;\n  text-align: center;\n}\n\n.popup-button {\n  margin: 10px;\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}